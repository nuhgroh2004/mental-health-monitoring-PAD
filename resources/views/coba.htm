<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thesis Progress Tracker</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            min-height: 100vh;
            background: #f0f2f5;
            color: #333;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: #ffffff;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #2563eb;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .target-section {
            background: #f8fafc;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            border: 1px solid #e2e8f0;
        }

        .section-title {
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #2563eb;
        }

        .target-form {
            display: grid;
            gap: 20px;
            margin-bottom: 30px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .form-group label {
            color: #4b5563;
            font-size: 0.9em;
            font-weight: 500;
        }

        .time-input {
            display: flex;
            gap: 10px;
        }

        .time-input input {
            width: 70px;
            text-align: center;
        }

        input {
            background: #ffffff;
            border: 2px solid #e2e8f0;
            padding: 12px;
            border-radius: 10px;
            color: #333;
            font-size: 1em;
            transition: all 0.3s ease;
        }

        input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 10px rgba(37, 99, 235, 0.1);
        }

        button {
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
        }

        .add-target {
            background: #2563eb;
            color: white;
            width: 100%;
        }

        .add-target:hover {
            background: #1d4ed8;
            transform: translateY(-2px);
        }

        .targets {
            display: grid;
            gap: 20px;
            margin-top: 30px;
        }

        .target-card {
            background: #ffffff;
            padding: 20px;
            border-radius: 15px;
            display: grid;
            gap: 10px;
            animation: slideIn 0.3s ease;
            border: 1px solid #e2e8f0;
            transition: all 0.3s ease;
        }

        .target-card:hover {
            transform: translateY(-2px);
            border-color: #2563eb;
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.1);
        }

        .stopwatch {
            background: #f8fafc;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            margin-top: 30px;
            border: 1px solid #e2e8f0;
        }

        .time {
            font-size: 4em;
            font-weight: bold;
            font-family: 'Roboto Mono', monospace;
            color: #2563eb;
            margin: 20px 0;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .controls button {
            flex: 1;
            max-width: 150px;
        }

        .start {
            background: #22c55e;
            color: white;
        }

        .start:hover {
            background: #16a34a;
        }

        .pause {
            background: #eab308;
            color: white;
        }

        .pause:hover {
            background: #ca8a04;
        }

        .finish {
            background: #ef4444;
            color: white;
        }

        .finish:hover {
            background: #dc2626;
        }

        .reset {
            background: #6366f1;
            color: white;
        }

        .reset:hover {
            background: #4f46e5;
        }

        .controls button:disabled {
            background: #e2e8f0;
            cursor: not-allowed;
            opacity: 0.5;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: #ffffff;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            max-width: 90%;
            width: 400px;
            border: 2px solid #2563eb;
        }

        .modal-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 25px;
        }

        .target-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #f8fafc;
            padding: 15px;
            border-radius: 10px;
        }

        .target-status {
            font-size: 0.9em;
            padding: 5px 10px;
            border-radius: 5px;
            font-weight: 500;
        }

        .status-pending {
            background: #e2e8f0;
            color: #4b5563;
        }

        .status-completed {
            background: #22c55e;
            color: white;
        }

        .status-failed {
            background: #ef4444;
            color: white;
        }

        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }

            .time {
                font-size: 3em;
            }

            .controls {
                flex-direction: column;
            }

            .controls button {
                max-width: none;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Progress Tracker</h1>

        <div class="target-section">
            <h2 class="section-title">Tambah Target Baru</h2>
            <div class="target-form">
                <div class="form-group">
                    <label>Deskripsi Target</label>
                    <input type="text" id="targetDesc" placeholder="Contoh: Menulis Bab 1">
                </div>
                <div class="form-group">
                    <label>Waktu Target</label>
                    <div class="time-input">
                        <input type="number" id="targetHours" min="0" placeholder="Jam" max="23">
                        <input type="number" id="targetMinutes" min="0" placeholder="Menit" max="59">
                    </div>
                </div>
                <button class="add-target" onclick="addTarget()">+ Tambah Target</button>
            </div>
            <div class="targets" id="targetList"></div>
        </div>

        <div class="stopwatch" id="stopwatchSection" style="display: none;">
            <div class="time">00:00:00</div>
            <div class="controls">
            <button class="start">Mulai</button>
            <button class="pause" disabled>Jeda</button>
            <button class="finish" disabled>Selesai</button>
            <button class="reset" onclick="resetAll()">Reset</button>
            </div>
        </div>
        </div>

        <div class="modal" id="confirmModal">
        <div class="modal-content">
            <h2>Selesaikan Tracking?</h2>
            <p style="margin-top: 15px; color: #666;">Pastikan semua target sudah selesai dikerjakan</p>
            <div class="modal-buttons">
                <button onclick="finishTracking(true)" style="background: #22c55e; color: white;">Ya, Selesai</button>
                <button onclick="finishTracking(false)" style="background: #ef4444; color: white;">Batal</button>
            </div>
        </div>
    </div>

    <script>
        let startTime;
        let elapsedTime = 0;
        let timerInterval;
        let isRunning = false;
        let targets = [];
        let isFinished = false;

        const timeDisplay = document.querySelector('.time');
        const startButton = document.querySelector('.start');
        const pauseButton = document.querySelector('.pause');
        const finishButton = document.querySelector('.finish');
        const modal = document.getElementById('confirmModal');
        const stopwatchSection = document.getElementById('stopwatchSection');

        function formatTime(ms) {
            const hours = Math.floor(ms / 3600000);
            const minutes = Math.floor((ms % 3600000) / 60000);
            const seconds = Math.floor((ms % 60000) / 1000);
            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function startTimer() {
            if (!isRunning && !isFinished) {
                startTime = Date.now() - elapsedTime;
                timerInterval = setInterval(updateTime, 1000);
                isRunning = true;
                startButton.disabled = true;
                pauseButton.disabled = false;
                finishButton.disabled = false;
            }
        }

        function pauseTimer() {
            if (isRunning) {
                clearInterval(timerInterval);
                isRunning = false;
                startButton.disabled = false;
                pauseButton.disabled = true;
            }
        }

        function updateTime() {
            const currentTime = Date.now();
            elapsedTime = currentTime - startTime;
            timeDisplay.textContent = formatTime(elapsedTime);
        }

        function showFinishConfirmation() {
            modal.style.display = 'flex';
        }

        function finishTracking(confirmed) {
            modal.style.display = 'none';
            if (confirmed) {
                clearInterval(timerInterval);
                isRunning = false;
                isFinished = true;
                startButton.disabled = true;
                pauseButton.disabled = true;
                finishButton.disabled = true;

                const totalMinutes = elapsedTime / 60000;
                evaluateTargets(totalMinutes);
            }
        }

        function resetAll() {
            // Reset timer
            clearInterval(timerInterval);
            isRunning = false;
            isFinished = false;
            elapsedTime = 0;
            timeDisplay.textContent = '00:00:00';

            // Reset buttons
            startButton.disabled = false;
            pauseButton.disabled = true;
            finishButton.disabled = false;

            // Reset targets
            targets = [];
            renderTargets();

            // Hide stopwatch if no targets
            if (targets.length === 0) {
                stopwatchSection.style.display = 'none';
            }
        }

        function addTarget() {
            if (isFinished) return; // Prevent adding targets if tracking is finished

            const desc = document.getElementById('targetDesc').value;
            const hours = parseInt(document.getElementById('targetHours').value) || 0;
            const minutes = parseInt(document.getElementById('targetMinutes').value) || 0;
            const totalMinutes = (hours * 60) + minutes;

            if (desc && totalMinutes > 0) {
                targets.push({
                    description: desc,
                    targetMinutes: totalMinutes,
                    status: 'pending'
                });
                document.getElementById('targetDesc').value = '';
                document.getElementById('targetHours').value = '';
                document.getElementById('targetMinutes').value = '';
                renderTargets();

                // Show stopwatch section if it's the first target
                if (targets.length === 1) {
                    stopwatchSection.style.display = 'block';
                }
            }
        }

        function renderTargets() {
            const targetList = document.getElementById('targetList');
            targetList.innerHTML = '';

            targets.forEach((target, index) => {
                const hours = Math.floor(target.targetMinutes / 60);
                const minutes = target.targetMinutes % 60;

                const targetElement = document.createElement('div');
                targetElement.className = 'target-card';

                let statusClass = 'status-pending';
                let statusText = 'Menunggu';

                if (target.status === 'completed') {
                    statusClass = 'status-completed';
                    statusText = 'Tercapai ✓';
                } else if (target.status === 'failed') {
                    statusClass = 'status-failed';
                    statusText = 'Tidak Tercapai ✗';
                }

                targetElement.innerHTML = `
                    <div class="target-info">
                        <div>
                            <strong>${target.description}</strong>
                            <p style="color: #666; margin-top: 5px;">Target: ${hours} jam ${minutes} menit</p>
                        </div>
                        <span class="target-status ${statusClass}">${statusText}</span>
                    </div>
                `;
                targetList.appendChild(targetElement);
            });
        }

        function evaluateTargets(actualMinutes) {
            targets.forEach(target => {
                target.status = actualMinutes >= target.targetMinutes ? 'completed' : 'failed';
            });
            renderTargets();
        }

        startButton.addEventListener('click', startTimer);
        pauseButton.addEventListener('click', pauseTimer);
        finishButton.addEventListener('click', showFinishConfirmation);

        // Initial state
        stopwatchSection.style.display = 'none';

        // Tambahkan validasi form
        function validateForm(desc, hours, minutes) {
            if (!desc.trim()) {
                alert('Deskripsi target tidak boleh kosong!');
                return false;
            }

            if (hours === 0 && minutes === 0) {
                alert('Waktu target harus lebih dari 0!');
                return false;
            }

            if (hours < 0 || minutes < 0) {
                alert('Waktu tidak boleh negatif!');
                return false;
            }

            if (minutes >= 60) {
                alert('Menit tidak boleh lebih dari atau sama dengan 60!');
                return false;
            }

            return true;
        }

        // Update fungsi addTarget dengan validasi
        function addTarget() {
            if (isFinished) {
                alert('Tracking sudah selesai. Silakan reset untuk memulai baru.');
                return;
            }

            const desc = document.getElementById('targetDesc').value;
            const hours = parseInt(document.getElementById('targetHours').value) || 0;
            const minutes = parseInt(document.getElementById('targetMinutes').value) || 0;

            if (!validateForm(desc, hours, minutes)) {
                return;
            }

            const totalMinutes = (hours * 60) + minutes;

            targets.push({
                description: desc,
                targetMinutes: totalMinutes,
                status: 'pending',
                timeAdded: new Date().toISOString()
            });

            document.getElementById('targetDesc').value = '';
            document.getElementById('targetHours').value = '';
            document.getElementById('targetMinutes').value = '';
            renderTargets();

            if (targets.length === 1) {
                stopwatchSection.style.display = 'block';
            }
        }

        // Tambahkan fungsi untuk menghapus target
        function deleteTarget(index) {
            if (!isRunning && !isFinished) {
                targets.splice(index, 1);
                renderTargets();

                if (targets.length === 0) {
                    stopwatchSection.style.display = 'none';
                }
            }
        }

        // Update fungsi renderTargets dengan tombol hapus
        function renderTargets() {
            const targetList = document.getElementById('targetList');
            targetList.innerHTML = '';

            targets.forEach((target, index) => {
                const hours = Math.floor(target.targetMinutes / 60);
                const minutes = target.targetMinutes % 60;

                const targetElement = document.createElement('div');
                targetElement.className = 'target-card';

                let statusClass = 'status-pending';
                let statusText = 'Menunggu';

                if (target.status === 'completed') {
                    statusClass = 'status-completed';
                    statusText = 'Tercapai ✓';
                } else if (target.status === 'failed') {
                    statusClass = 'status-failed';
                    statusText = 'Tidak Tercapai ✗';
                }

                targetElement.innerHTML = `
                    <div class="target-info">
                        <div>
                            <strong>${target.description}</strong>
                            <p style="color: #666; margin-top: 5px;">Target: ${hours} jam ${minutes} menit</p>
                        </div>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <span class="target-status ${statusClass}">${statusText}</span>
                            ${!isRunning && !isFinished ? `
                                <button onclick="deleteTarget(${index})"
                                        style="background: #ef4444; padding: 5px 10px; color: white; border-radius: 5px;">
                                    Hapus
                                </button>
                            ` : ''}
                        </div>
                    </div>
                `;
                targetList.appendChild(targetElement);
            });
        }

        // Tambahkan konfirmasi sebelum reset
        function confirmReset() {
            if (confirm('Apakah Anda yakin ingin mereset semua data?')) {
                resetAll();
            }
        }

        // Update event listener untuk tombol reset
        document.querySelector('.reset').addEventListener('click', confirmReset);

        // Tambahkan keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (!isFinished) {
                if (e.code === 'Space' && !e.target.matches('input')) {
                    e.preventDefault();
                    if (isRunning) {
                        pauseTimer();
                    } else {
                        startTimer();
                    }
                }
            }
        });

        // Simpan data ke localStorage
        function saveToLocalStorage() {
            const data = {
                targets,
                elapsedTime,
                isRunning,
                isFinished,
                startTime: startTime ? startTime.toString() : null
            };
            localStorage.setItem('progressTrackerData', JSON.stringify(data));
        }

        // Muat data dari localStorage
        function loadFromLocalStorage() {
            const savedData = localStorage.getItem('progressTrackerData');
            if (savedData) {
                const data = JSON.parse(savedData);
                targets = data.targets;
                elapsedTime = data.elapsedTime;
                isRunning = data.isRunning;
                isFinished = data.isFinished;
                startTime = data.startTime ? new Date(data.startTime) : null;

                if (targets.length > 0) {
                    stopwatchSection.style.display = 'block';
                }

                if (isRunning) {
                    startTimer();
                }

                renderTargets();
                timeDisplay.textContent = formatTime(elapsedTime);

                // Update button states
                startButton.disabled = isRunning || isFinished;
                pauseButton.disabled = !isRunning || isFinished;
                finishButton.disabled = isFinished;
            }
        }

        // Tambahkan auto-save setiap kali ada perubahan
        function autoSave() {
            saveToLocalStorage();
        }

        // Tambahkan event listener untuk auto-save
        setInterval(autoSave, 1000);

        // Load data saat halaman dimuat
        window.addEventListener('load', loadFromLocalStorage);
    </script>
</body>
</html>
